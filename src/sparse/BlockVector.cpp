//////////////////////////////////////////////////////////////////////////////////////////////
/// \file BlockVector.cpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#include <steam/sparse/BlockVector.hpp>

#include <glog/logging.h>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Default constructor, vector size must still be set before using
//////////////////////////////////////////////////////////////////////////////////////////////
BlockVector::BlockVector() {}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Block size constructor
//////////////////////////////////////////////////////////////////////////////////////////////
BlockVector::BlockVector(const std::vector<unsigned int>& blkRowSizes) {
  this->reset(blkRowSizes);
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Block size (with data) constructor
//////////////////////////////////////////////////////////////////////////////////////////////
BlockVector::BlockVector(const std::vector<unsigned int>& blkRowSizes, const Eigen::VectorXd& v) {
  this->reset(blkRowSizes);
  this->set(v);
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Resize and clear vector
//////////////////////////////////////////////////////////////////////////////////////////////
void BlockVector::reset(const std::vector<unsigned int>& blkRowSizes) {
  CHECK(blkRowSizes.size() > 0) << "Tried to initialize a block matrix with 0 rows.";
  scalarRowDim_ = 0;
  blkRowSizes_ = blkRowSizes;
  cumBlkRowSizes_.reserve(blkRowSizes_.size());
  for (std::vector<unsigned int>::const_iterator it = blkRowSizes_.begin(); it != blkRowSizes_.end(); ++it) {
    CHECK(*it > 0) << "Tried to initialize a block row size of 0.";
    cumBlkRowSizes_.push_back(scalarRowDim_);
    scalarRowDim_ += *it;
  }
  data_ = Eigen::VectorXd::Zero(scalarRowDim_);
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Set internal data (total size of v must match concatenated block sizes)
//////////////////////////////////////////////////////////////////////////////////////////////
void BlockVector::set(const Eigen::VectorXd& v) {
  CHECK(scalarRowDim_ == (unsigned int)v.size()) << "Block row size: " << scalarRowDim_ << " and vector size: " << v.size() << " do not match.";
  data_ = v;
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Get number of block rows
//////////////////////////////////////////////////////////////////////////////////////////////
unsigned int BlockVector::getNumBlkRows() {
  return blkRowSizes_.size();
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Adds the vector to the block entry at index 'r', block dim must match
//////////////////////////////////////////////////////////////////////////////////////////////
void BlockVector::add(const unsigned int& r, const Eigen::VectorXd& v) {
  CHECK(r < blkRowSizes_.size());
  CHECK(v.rows() == (int)blkRowSizes_[r]);
  data_.block(cumBlkRowSizes_[r],0,blkRowSizes_[r],1) += v;
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Return block vector at index 'r'
//////////////////////////////////////////////////////////////////////////////////////////////
Eigen::VectorXd BlockVector::getBlkVector(const unsigned int& r) {
  CHECK(r < blkRowSizes_.size());
  return data_.block(cumBlkRowSizes_[r],0,blkRowSizes_[r],1);
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Convert to Eigen dense vector format
//////////////////////////////////////////////////////////////////////////////////////////////
Eigen::VectorXd BlockVector::toEigen() {
  return data_;
}

} // steam

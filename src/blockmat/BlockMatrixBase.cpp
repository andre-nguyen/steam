//////////////////////////////////////////////////////////////////////////////////////////////
/// \file BlockMatrixBase.cpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#include <steam/blockmat/BlockMatrixBase.hpp>

#include <stdexcept>
#include <iostream>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Default constructor, matrix size must still be set before using
//////////////////////////////////////////////////////////////////////////////////////////////
BlockMatrixBase::BlockMatrixBase() {
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Rectangular matrix constructor
//////////////////////////////////////////////////////////////////////////////////////////////
BlockMatrixBase::BlockMatrixBase(const std::vector<unsigned int>& blkRowSizes,
                                 const std::vector<unsigned int>& blkColSizes)
  : symmetric_(false) {

  if (blkColSizes.size() <= 0) {
    throw std::invalid_argument("Tried to initialize a block matrix with no column size.");
  }
  if (blkRowSizes.size() <= 0) {
    throw std::invalid_argument("Tried to initialize a block matrix with no row size.");
  }

  // Setup indexing
  indexing_ = BlockMatrixIndexing(blkRowSizes, blkColSizes);
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Block-size-symmetric matrix constructor, pure scalar symmetry is still optional
//////////////////////////////////////////////////////////////////////////////////////////////
BlockMatrixBase::BlockMatrixBase(const std::vector<unsigned int>& blkSqSizes, bool symmetric)
  : symmetric_(symmetric) {

  if (blkSqSizes.size() <= 0) {
    throw std::invalid_argument("Tried to initialize a block matrix with no row size.");
  }

  // Setup indexing
  indexing_ = BlockMatrixIndexing(blkSqSizes);
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Get indexing object
//////////////////////////////////////////////////////////////////////////////////////////////
const BlockMatrixIndexing& BlockMatrixBase::getIndexing() const {
  return indexing_;
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Get if matrix is symmetric on a scalar level
//////////////////////////////////////////////////////////////////////////////////////////////
bool BlockMatrixBase::isSymmetric() const {
  return symmetric_;
}

} // steam

//////////////////////////////////////////////////////////////////////////////////////////////
/// \file EvalTreeHandle.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_EVAL_TREE_HANDLE_HPP
#define STEAM_EVAL_TREE_HANDLE_HPP

#include <steam/evaluator/blockauto/EvalTreeNode.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Simple container class for the block-automatic evaluation tree. The true purpose
///        of this class is to help handle the pool-memory release upon desctruction.
//////////////////////////////////////////////////////////////////////////////////////////////
template <typename TYPE>
class EvalTreeHandle
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Default constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  EvalTreeHandle(EvalTreeNode<TYPE>* root) : root_(root) {}

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Destructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  ~EvalTreeHandle() {
    EvalTreeNode<TYPE>::pool.returnObj(root_);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get root
  /////////////////////////////////////////////////////////////////////////////////////////////
  EvalTreeNode<TYPE>* getRoot() const {
    return root_;
  }

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get current value
  /////////////////////////////////////////////////////////////////////////////////////////////
  const TYPE& getValue() const {
    return root_->getValue();
  }

 private:

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Instance of TYPE
  /////////////////////////////////////////////////////////////////////////////////////////////
  EvalTreeNode<TYPE>* root_;
};

} // steam

#endif // STEAM_EVAL_TREE_HANDLE_HPP

//////////////////////////////////////////////////////////////////////////////////////////////
/// \file OpenMpPool.hpp
/// \brief Implements a basic singleton object pool. The implementation is fairly naive,
///        but should be fast given its assumptions. The OmpPool is also thread safe for
///        OpenMP threads, assuming the number of OpenMP threads was set at compile time.
///        The purpose of this object to avoid making many small dynamic allocations
///        during block automatic evaluation.
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_OPENMP_POOL_HPP
#define STEAM_OPENMP_POOL_HPP

#include <steam/evaluator/blockauto/Pool.hpp>

#include <omp.h>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief OpenMP enabled pool class. This is implemented fairly naively by taking advantage
///        of the number of OpenMP threads at compile time. By having a seperate pool for
///        each thread, we are fully safe from sychronization issues.
//////////////////////////////////////////////////////////////////////////////////////////////
template<typename TYPE, int MAX_SIZE = 50>
class OmpPool {
 public:

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ////////////////////////////////////////////////////////////////////////////////////////////
  OmpPool();

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Destructor
  ////////////////////////////////////////////////////////////////////////////////////////////
  ~OmpPool();

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get an object
  ////////////////////////////////////////////////////////////////////////////////////////////
  TYPE* getObj();

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Return an object to the pool
  ////////////////////////////////////////////////////////////////////////////////////////////
  void returnObj(TYPE* object);

 private:

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Maximum number of threads this pool can support.
  ////////////////////////////////////////////////////////////////////////////////////////////
  static const int MAX_NUM_THREADS = 64;

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Array of pools (one for each "possible" thread)
  ////////////////////////////////////////////////////////////////////////////////////////////
  Pool<TYPE,MAX_SIZE>* pools_[MAX_NUM_THREADS];
};

} // steam

#include <steam/evaluator/blockauto/OpenMpPool-inl.hpp>

#endif // STEAM_OPENMP_POOL_HPP

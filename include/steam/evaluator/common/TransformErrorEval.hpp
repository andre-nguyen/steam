//////////////////////////////////////////////////////////////////////////////////////////////
/// \file TransformErrorEval.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_TRANSFORM_ERROR_EVALUATOR_HPP
#define STEAM_TRANSFORM_ERROR_EVALUATOR_HPP

#include <steam/evaluator/ErrorEvaluator.hpp>
#include <steam/evaluator/TransformEvaluators.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Transformation error function evaluator
//////////////////////////////////////////////////////////////////////////////////////////////
class TransformErrorEval : public ErrorEvaluator
{
public:

  /// Convenience typedefs
  typedef boost::shared_ptr<TransformErrorEval> Ptr;
  typedef boost::shared_ptr<const TransformErrorEval> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor - error is difference between 'T' and identity (in Lie algebra space)
  //////////////////////////////////////////////////////////////////////////////////////////////
  TransformErrorEval(const se3::TransformEvaluator::ConstPtr& T);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Convenience constructor - error between meas_T_21 and T_21
  //////////////////////////////////////////////////////////////////////////////////////////////
  TransformErrorEval(const lgmath::se3::Transformation& meas_T_21,
                     const se3::TransformEvaluator::ConstPtr& T_21);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Convenience constructor - error between meas_T_21 and T_20*inv(T_10)
  //////////////////////////////////////////////////////////////////////////////////////////////
  TransformErrorEval(const lgmath::se3::Transformation& meas_T_21,
                     const se3::TransformStateVar::ConstPtr& T_20,
                     const se3::TransformStateVar::ConstPtr& T_10);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the 6-d measurement error
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the 6-d measurement error and Jacobians
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd evaluate(std::vector<Jacobian>* jacs) const;

private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Error evaluator
  //////////////////////////////////////////////////////////////////////////////////////////////
  se3::Vector6dEvaluator::ConstPtr errorEvaluator_;
};

} // steam

#endif // STEAM_TRANSFORM_ERROR_EVALUATOR_HPP

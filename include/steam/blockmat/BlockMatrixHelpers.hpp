//////////////////////////////////////////////////////////////////////////////////////////////
/// \file BlockMatrixHelpers.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_BLOCK_MATRIX_HELPERS_HPP
#define STEAM_BLOCK_MATRIX_HELPERS_HPP

#include <vector>
#include <map>

#include <Eigen/Core>
#include <Eigen/Sparse>

namespace steam {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Class to store block-row indexing
/////////////////////////////////////////////////////////////////////////////////////////////
class BlockDimIndexing
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockDimIndexing();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockDimIndexing(const std::vector<unsigned int>& blkSqSizes);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the vector of block sizes
  //////////////////////////////////////////////////////////////////////////////////////////////
  const std::vector<unsigned int>& blkSizes() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get number of block entries
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int numEntries() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the block size of an entry
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int blkSizeAt(unsigned int index) const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the cumulative block size at an index
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int cumSumAt(unsigned int index) const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get scalar size
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int scalarSize() const;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block sizes
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<unsigned int> blkSizes_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Cumulative sum of scalar matrix size (across blocks)
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<unsigned int> cumBlkSizes_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Total scalar size
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int scalarDim_;

};

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Class to store block-matrix indexing
/////////////////////////////////////////////////////////////////////////////////////////////
class BlockMatrixIndexing
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixIndexing();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor for a block-size-symmetric matrix
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixIndexing(const std::vector<unsigned int>& blkSizes);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Rectangular matrix constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixIndexing(const std::vector<unsigned int>& blkRowSizes,
                      const std::vector<unsigned int>& blkColSizes);


  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get block-row indexing
  //////////////////////////////////////////////////////////////////////////////////////////////
  const BlockDimIndexing& rowIndexing() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get block-column indexing
  //////////////////////////////////////////////////////////////////////////////////////////////
  const BlockDimIndexing& colIndexing() const;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block row indexing
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockDimIndexing blkRowIndexing_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block column indexing
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockDimIndexing blkColIndexing_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Whether matrix is block-size-symmetric
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool blkSizeSymmetric_;

};

} // steam

#endif // STEAM_BLOCK_MATRIX_HELPERS_HPP

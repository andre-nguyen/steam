//////////////////////////////////////////////////////////////////////////////////////////////
/// \file BlockVector.hpp
///
/// \author Sean Anderson
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_BLOCK_VECTOR_HPP
#define STEAM_BLOCK_VECTOR_HPP

#include <vector>
#include <map>

#include <Eigen/Core>

#include <steam/blockmat/BlockMatrixHelpers.hpp>

namespace steam {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Class to store a single-scalar-column, block-row vector
/////////////////////////////////////////////////////////////////////////////////////////////
class BlockVector
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Default constructor, vector size must still be set before using
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockVector();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block size constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockVector(const std::vector<unsigned int>& blkRowSizes);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block size (with data) constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockVector(const std::vector<unsigned int>& blkRowSizes, const Eigen::VectorXd& data);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Set internal data (total size of v must match concatenated block sizes)
  //////////////////////////////////////////////////////////////////////////////////////////////
  void setFromScalar(const Eigen::VectorXd& v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get indexing object
  //////////////////////////////////////////////////////////////////////////////////////////////
  const BlockDimIndexing& getIndexing();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Adds the vector to the block entry at index 'r', block dim must match
  //////////////////////////////////////////////////////////////////////////////////////////////
  void add(const unsigned int& r, const Eigen::VectorXd& v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Return block vector at index 'r'
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::VectorXd at(const unsigned int& r);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Return map to block vector at index 'r'
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::Map<Eigen::VectorXd> mapAt(const unsigned int& r);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Convert to Eigen dense vector format
  //////////////////////////////////////////////////////////////////////////////////////////////
  const Eigen::VectorXd& toEigen();

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block indexing object
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockDimIndexing indexing_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Vector data
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::VectorXd data_;

};

} // steam

#endif // STEAM_BLOCK_VECTOR_HPP

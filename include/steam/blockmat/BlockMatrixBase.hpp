//////////////////////////////////////////////////////////////////////////////////////////////
/// \file BlockMatrixBase.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_BLOCK_MATRIX_BASE_HPP
#define STEAM_BLOCK_MATRIX_BASE_HPP

#include <vector>

#include <Eigen/Core>

#include <steam/blockmat/BlockMatrixHelpers.hpp>

namespace steam {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Interface for a block matrix
/////////////////////////////////////////////////////////////////////////////////////////////
class BlockMatrixBase
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Default constructor, matrix size must still be set before using
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixBase();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Rectangular matrix constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixBase(const std::vector<unsigned int>& blkRowSizes,
                  const std::vector<unsigned int>& blkColSizes);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block-size-symmetric matrix constructor, pure scalar symmetry is still optional
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixBase(const std::vector<unsigned int>& blkSqSizes, bool symmetric = false);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Interface for zero'ing all entries
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual void zero() = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get indexing object
  //////////////////////////////////////////////////////////////////////////////////////////////
  const BlockMatrixIndexing& getIndexing() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get if matrix is symmetric on a scalar level
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool isSymmetric() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Adds the matrix to the block entry at index (r,c), block dim must match
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual void add(unsigned int r, unsigned int c, const Eigen::MatrixXd& m) = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns a reference to the value at (r,c), if it exists
  ///        *Note this throws an exception if matrix is symmetric and you request a lower
  ///         triangular entry. For read operations, use copyAt(r,c).
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::MatrixXd& at(unsigned int r, unsigned int c) = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns a copy of the entry at index (r,c)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::MatrixXd copyAt(unsigned int r, unsigned int c) const = 0;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Whether matrix is symmetric
  //////////////////////////////////////////////////////////////////////////////////////////////
  bool symmetric_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block matrix indexing object
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockMatrixIndexing indexing_;

};

} // steam

#endif // STEAM_BLOCK_MATRIX_BASE_HPP

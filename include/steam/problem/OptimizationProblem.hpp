//////////////////////////////////////////////////////////////////////////////////////////////
/// \file OptimizationProblem.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_OPTIMIZATION_PROBLEM_HPP
#define STEAM_OPTIMIZATION_PROBLEM_HPP

#include <Eigen/Core>
#include <Eigen/Sparse>

#include <steam/state/StateVector.hpp>
#include <steam/problem/ParallelizedCostTermCollection.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Container for active state variables and cost terms associated with the
///        optimization problem to be solved.
//////////////////////////////////////////////////////////////////////////////////////////////
class OptimizationProblem
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Default constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  OptimizationProblem();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Add an 'active' state variable
  //////////////////////////////////////////////////////////////////////////////////////////////
  void addStateVariable(const StateVariableBase::Ptr& statevar);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Add a cost term (should depend on active states that were added to the problem)
  //////////////////////////////////////////////////////////////////////////////////////////////
  void addCostTerm(const CostTermBase::ConstPtr& costTerm);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Compute the cost from the collection of cost terms
  //////////////////////////////////////////////////////////////////////////////////////////////
  double cost() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get reference to state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  const std::vector<StateVariableBase::Ptr>& getStateVariables() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get the total number of cost terms
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int getNumberOfCostTerms() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Fill in the supplied block matrices
  //////////////////////////////////////////////////////////////////////////////////////////////
  void buildGaussNewtonTerms(const StateVector& stateVector,
                             Eigen::SparseMatrix<double>* approximateHessian,
                             Eigen::VectorXd* gradientVector) const;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Single threaded cost terms
  //////////////////////////////////////////////////////////////////////////////////////////////
  ParallelizedCostTermCollection singleCostTerms_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Collection of cost terms that implement their own parallelization
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<CostTermBase::ConstPtr> parallelizedCostTerms_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Collection of state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<StateVariableBase::Ptr> stateVariables_;
};

} // namespace steam

#endif // STEAM_OPTIMIZATION_PROBLEM_HPP

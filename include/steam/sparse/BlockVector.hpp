//////////////////////////////////////////////////////////////////////////////////////////////
/// \file BlockVector.hpp
///
/// \author Sean Anderson
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_BLOCK_VECTOR_HPP
#define STEAM_BLOCK_VECTOR_HPP

#include <vector>
#include <map>

#include <Eigen/Core>
#include <Eigen/Sparse>

namespace steam {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Class to store a block-entry level vector (single column)
/////////////////////////////////////////////////////////////////////////////////////////////
class BlockVector
{
 public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Default constructor, vector size must still be set before using
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockVector();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block size constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockVector(const std::vector<unsigned int>& blkRowSizes);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Block size (with data) constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  BlockVector(const std::vector<unsigned int>& blkRowSizes, const Eigen::VectorXd& data);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Resize and clear vector
  //////////////////////////////////////////////////////////////////////////////////////////////
  void reset(const std::vector<unsigned int>& blkRowSizes);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Set internal data (total size of v must match concatenated block sizes)
  //////////////////////////////////////////////////////////////////////////////////////////////
  void set(const Eigen::VectorXd& v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Get number of block rows
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int getNumBlkRows();

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Adds the vector to the block entry at index 'r', block dim must match
  //////////////////////////////////////////////////////////////////////////////////////////////
  void add(const unsigned int& r, const Eigen::VectorXd& v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Return block vector at index 'r'
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::VectorXd getBlkVector(const unsigned int& r);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Convert to Eigen dense vector format
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::VectorXd toEigen();

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Total scalar size in row dimension
  //////////////////////////////////////////////////////////////////////////////////////////////
  unsigned int scalarRowDim_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Total 'block' size in row dimension
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<unsigned int> blkRowSizes_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Cumulative sum of scalar matrix size (across blocks) in the row dimension
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<unsigned int> cumBlkRowSizes_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Vector data
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::VectorXd data_;

};

} // steam

#endif // STEAM_BLOCK_VECTOR_HPP
